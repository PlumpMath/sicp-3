;; # -*- coding: utf-8 -*-

;; ex2.1
(define (numer x)
  (car x))
(define (denom x)
  (cdr x))
(define (make-rat n d)
  (let ((g (gcd n d)))
  (cons (/ n g) (/ d g) )))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (make-rat_ n d)
  (let ((g (gcd n d)))
    (cond ((or (and (< 0 n) (< 0 d)) (and (> 0 n) (> 0 d)))
           (cons (/ (abs n) g) (/ (abs d) g) ))
          ((or (and (< 0 n) (> 0 d)) (and (> 0 n) (< 0 d)))
           (cons (- (/ (abs n) g)) (/ (abs d) g) )))))

;; ex.2.2
(define (make-segment p1 p2)
  (cons p1 p2))
(define (start-segment l)
  (car l))
(define (end-segment l)
  (cdr l))
(define (make-point x y)
  (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;; ex.2.3
(define (make-segment p1 p2)
  (cons p1 p2))
(define (start-segment l)
  (car l))
(define (end-segment l)
  (cdr l))
(define (make-point x y)
  (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(define (square n)
  (* n n))

(define (make-rectangle p1 p3)
  (cons p1 p3))
(define (lt-point r)
  (car r))
(define (rb-point r)
  (cdr r))
(define (lb-point r)
  (make-point
   (x-point (lt-point r))
   (y-point (rb-point r))))
(define (rt-point r)
  (make-point
   (x-point (rb-point r))
   (y-point (lt-point r))))
(define (print-rectangle r)
  (newline)
  (display "(")
  (print-point (lt-point r))
  (print-point (lb-point r))
  (print-point (rb-point r))
  (print-point (rt-point r))
  (newline)
  (display ")")
  (newline))
(print-rectangle (make-rectangle (make-point 5 10)
                                 (make-point 10 5)))
(define (get-len p1 p2)
  (sqrt (+ (square (- (x-point p1) (x-point p2)))
           (square (- (y-point p1) (y-point p2))))))
(define (get-perimeter r)
  (+ (get-len (lt-point r) (lb-point r))
     (get-len (lb-point r) (rb-point r))
     (get-len (rb-point r) (rt-point r))
     (get-len (rt-point r) (lt-point r))))
(define (get-area r)
  (* (get-len (lt-point r) (rt-point r))
     (get-len (lt-point r) (lb-point r))))

(get-perimeter (make-rectangle (make-point 5 10)
                               (make-point 10 5)))
(get-area (make-rectangle (make-point 5 10)
                          (make-point 10 5)))

;; ex2.4
(define (cons x y)
  (lambda (m) (m x y)))
(define (car z)
  (z (lambda (p q) p)))
(define (cdr z)
  (z (lambda (p q) q)))
(car (cons 1 2))
(cdr (cons 1 2))

;; ex2.5
(define (cons x y)
  (* (expt 2 x) (expt 2 y)))
(define (get-exp n x p) ;; n은 최대 x의 p승으로 나누어 떨어지는가???
  (if (= (remainder n x) 0)
      (get-exp (/ n x) x (+ p 1))
      p))
(define (car z)
  (get-exp z 2 0))
(define (cdr z)
  (get-exp z 3 0))

;; ex2.6
